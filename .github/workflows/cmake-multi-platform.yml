name: CMake Build with VSG

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
    - uses: actions/checkout@v4

    # 设置 MSVC 环境
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3
      with:
        vs-version: '17.0'

    # 设置 Vulkan SDK
    - name: Setup Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: 1.3.231.1
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true

    # 创建安装目录
    - name: Create Installation Directory
      shell: pwsh
      run: |
        New-Item -Path "C:/dev" -ItemType Directory -Force

    # 编译安装 VSG
    - name: Build and Install VSG
      shell: pwsh
      run: |
        Set-Location -Path "C:/dev"
        git clone https://github.com/vsg-dev/VulkanSceneGraph.git
        Set-Location -Path "VulkanSceneGraph"
        cmake -B build -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_INSTALL_PREFIX="C:/dev/install"
        cmake --build build --config ${{ matrix.build_type }} --parallel
        cmake --install build --config ${{ matrix.build_type }}

    # 编译安装 vsgXchange
    - name: Build and Install vsgXchange
      shell: pwsh
      run: |
        Set-Location -Path "C:/dev"
        git clone https://github.com/vsg-dev/vsgXchange.git
        Set-Location -Path "vsgXchange"
        cmake -B build -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_PREFIX_PATH="C:/dev/install" `
          -DCMAKE_INSTALL_PREFIX="C:/dev/install"
        cmake --build build --config ${{ matrix.build_type }} --parallel
        cmake --install build --config ${{ matrix.build_type }}

    # 编译安装 vsgImGui
    - name: Build and Install vsgImGui
      shell: pwsh
      run: |
        Set-Location -Path "C:/dev"
        git clone https://github.com/vsg-dev/vsgImGui.git
        Set-Location -Path "vsgImGui"
        cmake -B build -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_PREFIX_PATH="C:/dev/install" `
          -DCMAKE_INSTALL_PREFIX="C:/dev/install"
        cmake --build build --config ${{ matrix.build_type }} --parallel
        cmake --install build --config ${{ matrix.build_type }}

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # 编译主项目
    - name: Configure CMake
      shell: pwsh
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
        -G "Visual Studio 17 2022" -A x64 `
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
        -DCMAKE_PREFIX_PATH="C:/dev/install" `
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    # 打包构建结果
    - name: Package
      shell: pwsh
      run: |
        mkdir release
        # 复制主项目构建结果
        Copy-Item "${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/*" -Destination "release/" -Recurse
        # 复制依赖库
        Copy-Item "C:/dev/install/bin/*" -Destination "release/" -Recurse

    # 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release
        path: release/
        compression-level: 6
